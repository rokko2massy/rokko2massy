Record	型	概要
id	uuid	主キー
started_at	datetime	いつタイマーを開始したか
length	int	タイマーの長さ
finished_at	datetime	いつタスクが終わったか。
result	bool	達成したか否か
in_time	bool	時間内に完了したかどうか
point	int	獲得ポイント
deadline()	→datetime	いつタイマーが切れるか。Started_at+length
duration()	→int	何秒でできたか

Character	型	概要
id	uuid	主キー
name	string	キャラの名前
exp	int	キャラの経験値。このキャラにしているときに獲得したポイントが自動的に加算される。
active	bool	今使っているキャラか否か
unlocked	bool	アンロックされているか否か
is_premium	bool	有料かどうか
unlock_border	int	アンロック可能になるための必要累積ポイント。有料の場合は0
icon()	→string	レベルをもとにアイコン画像のURLを返す関数
can_unock()	→bool	累積ポイントと現在のアンロック状態をもとに、アンロック可能かどうかを返す関数
level()	→bool	経験値をもとにレベルをはじき出す関数

音楽再生はAudioPlayerがよさそう。2曲用意しておいて、残り1分になると音楽が切り替わる。
できたボタンを押すとタイマーは停止する。時間内だろうが超過していようがお構いなく。
なお、別画面に遷移したりホーム画面に戻ったりするとキャンセルとみなされて強制終了。キャンセルの場合Record自体が削除されてなかったことになる。
その後、親による確認画面に移行。この間画面はスリープさせない。
親が「達成」を押すとresultがTrueになり、Recordが保存される。「未達」を押すとresultはFalseになり、Recordが保存される。
パターンは
・時間内に完了し、親が達成認定(100pt)
・時間内に完了し、親が未達認定(50pt)
・時間を超過し、親が達成認定(50pt)
・時間を超過し、親が未達認定(10pt)

累積ポイントに応じて、無料キャラがアンロックされていく。
アンロックは自動ではなく、「アンロック可能」状態に移行してから手動でタップするとアンロックされる。
累積ポイントは、Recordのpointを全部足せば出る

新しいキャラを追加するにはどうしようね？
外部サーバーにキャラリストとアイコンを保持しておくことにしよう。Firebaseか？
まず、起動時に、今持っているキャラと外部サーバーにあるキャラを照合する。
ローカルDBにいないキャラがある場合、ダウンロードする。完全上書きじゃないのがポイントで、新キャラだけダウンロードできる。
ここで、ダウンロードとは、ローカルDBにデータをコピーすると同時に、アイコンをダウンロードすることを指す。
現在activeになっているキャラがいない場合、デフォルトのキャラをactiveに設定する。
上記は起動時にローディング画面の裏で流す。
キャラ選択画面は下に引っ張って更新すると上と同じ処理をしてくれる。

今まで獲得したキャラの画像を並べてみることができる。
